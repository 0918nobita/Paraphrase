==============================================================================
Paraphrase ver. 0.9.1　ビルドマニュアル by 飯倉宏治 2019.01.07
==============================================================================

目次
    1. Linux でのビルド
    2. MacOS でのビルド
    3. Windows でのビルド
    4. 動作確認
    A. 更新履歴

------------------------------------------------------------------------------
1. Linux でのビルド
------------------------------------------------------------------------------
　ここでは、Ubuntu 16.04 を対象に Linux でのビルドの説明を行います（他のディス
トリビューションでは同等の操作に適宜読み替えて下さい）。

　Paraphrase は readline と boost を利用しています。そのため、これらがインスト
ールされていないのであれば、以下のコマンドを用いてそれぞれをインストールします。

    boost のインストール
        apt-get install libboost-all-dev

    readline のインストール
        apt-get install libreadline6-dev

git がインストールされていない場合は、git もインストールします。

    git のインストール
        apt-get install git

必要なものが揃ったら、適当なディレクトリにて git clone してソースコードを取得し
ます。

    git clone https://github.com/iigura/Paraphrase.git

paraphrase というディレクトリが作成され、そのディレクトリ中にある src ディレク
トリにソースコードが格納されていますので、

    cd paraphrase/src

とし、

    make linux

を実行します。無事、make が終了すると paraphrase ディレクトリの直下に para お
よび libPP.so というファイルが生成されます。これらファイルが Paraphrase の言語
処理系を構成するファイルとなります。動作確認は本文書の「4. 動作確認」を参照し
て下さい。

------------------------------------------------------------------------------
2. MacOS でのビルド
------------------------------------------------------------------------------
　Paraphrase は readline と boost を利用しています。そのため、これらがインスト
ールされていないのであれば、以下のコマンドを用いてそれぞれをインストールします。

    boost のインストール
        brew install boost

readline はもしかすると既にインストールされているかもしれません。エラー等が出る
ようであれば以下のコマンドを用いてインストールしてみて下さい。

    readline のインストール（必要であれば…）
        breww install readline

必要なものが揃ったら、適当なディレクトリにて git clone してソースコードを取得し
ます。

    git clone https://github.com/iigura/Paraphrase.git

paraphrase というディレクトリが作成され、そのディレクトリ中にある src ディレク
トリにソースコードが格納されていますので、

    cd paraphrase/src

とし、

    make macos

を実行します。無事、make が終了すると paraphrase ディレクトリの直下に para お
よび libPP.so というファイルが生成されます。これらファイルが Paraphrase の言語
処理系を構成するファイルとなります。動作確認は本文書の「4. 動作確認」を参照し
て下さい。

------------------------------------------------------------------------------
3. Windows でのビルド
------------------------------------------------------------------------------
Windows 版のビルドは Visual Studio 2017 にてビルドを行います。ソースコードは
git を用いて取得するため、Windows 版の git を適宜入手＆インストールし、適当な
ディレクトリにて git clone してソースコードを取得します。

    git clone https://github.com/iigura/Paraphrase.git

paraphrase というディレクトリが作成され、そのディレクトリ中にある src/windows 
ディレクトリの中に paraphrase.sln というファイルがあるので、それを Visual
Studio にて開きます。

Paraphrase プロジェクトには、以下の 2 つのパッケージを Nuget を用いてインストー
ルしておきます。

    1) boost (ver.1.68)
    2) boost-vc141

その他プロジェクトに対しても Nuget にてパッケージをインストールしますが、上の
パッケージのうち 1 番目の boost をインストールしておけば十分です。

ソリューションの中に paraphrase というプロジェクトがあるので、それをビルドしま
す。無事ビルドが終了すると、paraphrase ディレクトリの直下に para.exe および
libPP.dll というファイルが生成されます。これらファイルが Paraphrase の言語処理
系を構成するファイルとなります。動作確認は本文書の「4. 動作確認」を参照して下さ
い。

------------------------------------------------------------------------------
4. 動作確認
------------------------------------------------------------------------------
　Paraphrase の言語処理系（Paraphrase インタプリタ）は paraphrase ディレクトリ
にある para （Windows 版は para.exe）にて起動します。無事起動すると、プロンプト
「>」が表示されますので、

    2 3 + .

と入力しリターンキーを押下して下さい。

    5 ok.

と表示されれば Paraphrase インタプリタは、とりあえず動作していることが確認でき
ます。

　次に、並列に動作することを確認します。Ctrl-C を入力し、Paraphrase インタプリ
タを終了させて下さい。samples ディレクトリに移動し、Linux または MacOS の場合は、
test_countPrimeMT を Windowd の場合は test_countPrimeMT.bat を起動して下さい。
しばらくすると、

    numOfPrimes=664579 (2 ... 9999991)

と表示されます（Windows の場合は、プロンプト「>」が表示され、しばらくしてから上
記文字列が表示されます）。

この test_countPrime は 1 から 100 万の間にある素数を、並列処理を用いて数えるも
のです。実行中に CPU の使用状況などを確認すると、全ての CPU 負荷が上昇している
ことが確認できると思います。


以上で、ビルド＆動作確認についての説明を終わります。


------------------------------------------------------------------------------
A. 更新履歴
------------------------------------------------------------------------------
0.9.0    最初のリリース
0.9.0a   誤字修正（リリース日の誤り修正）
0.9.1    Windows 版プロジェクトファイル追加忘れに伴うバージョンアップ
         更新履歴追加


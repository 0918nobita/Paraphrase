===============================================================================
Paraphrase ver.0.9.3　同梱ファイル情報　by Koji Iigura
===============================================================================

-------------------------------------------------------------------------------
ビルド済みパッケージに同梱されているもの
-------------------------------------------------------------------------------

paraphrase
  +- FILES.txt <-------------------- 本文書（このファイル）
  +- README.md <-------------------- Paraphrase の概要等
  +- docs <------------------------- ドキュメントディレクトリ
  |    +- README.html <------------- README.md の HTML 版
  |    +- ext <--------------------- 拡張辞書関連文書
  |    |    +- ext.css <------------ 拡張辞書の説明で用いる css ファイル
  |    |    +- extFactor.html <----- extFactor.{so | dll} の説明文書
  |    |    +- extLP.html <--------- extLP.{so | dll} の説明文書
  |    +- index.html <-------------- 文書ファイルの取りまとめ用 HTML ファイル
  |    +- readme.css <-------------- README.html 用 css ファイル
  |    +- top.css <----------------- docs/index.html 用 css ファイル
  |    +- words <------------------- ワードに関するものを集めたディレクトリ
  |         +- index.html <--------- 全ワード辞典（リファレンスマニュアル）
  |         +- words.css <---------- 上記リファレンスマニュアル用 CSS ファイル
  +- ext <-------------------------- 拡張辞書を格納するディレクトリ
  |    +- extFactor.{so | dll} <---- factor 型の if 文等を格納した拡張辞書（参考）
  |    +- extLP.{so | dll} <-------- 簡易文芸的プログラミング用拡張辞書（参考）
  +- libPP.{so | dll} <------------- Paraphrase インタプリタ用動的ライブラリ
  +- para{.exe} <------------------- Paraphrase インタプリタ（言語処理系）
  +- samples <---------------------- サンプルプログラム格納用ディレクトリ
       +- SAMPLES.txt <------------- サンプルプログラムの概要説明
       +- FizzBuzz.pp <------------- いわゆる FizzBuzz 問題用ワード
       +- PE21-shot.pp <------------ test_PE21mt60k{.bat} の本体
       +- check-scriptFile-args.pp   コマンドライン引数の確認用
       +- countPrimeMT-short.pp <--- 1 から 1000 万までの素数を数えます
       +- dumpMPmt.pp <------------- 1 から 1000 までのメルセンヌ素数を表示します
       +- test_countPrimeMT{.bat} <- 1 から 100 万までの素数を数えます
       +- test_PE21mt60k{.bat} <---- ProjectEuler21 の拡張版
       +- zdk.pp <------------------ いわゆるズンドコキヨシ問題用ワード

-------------------------------------------------------------------------------
ソースコード一式に同梱されているもの
-------------------------------------------------------------------------------
上記ビルド済みパッケージ版からバイナリ（実行形式および動的リンクライブラリ）を
取り除き、代わりに以下のファイルを追加したものとなっています。

paraphrase
  +- BUILD.txt <-------------------- ビルド方法を示したメモ  
  +- src <-------------------------- ソースコード格納ディレクトリ
       +- Makefile <---------------- Linux, MacOS 用 Makefile
       +- dict <-------------------- 各種ワード関連用ソース格納ディレクトリ
       |    +- Makefile <----------- ワード関連 Makefile
       |    +- dictArray.cpp <------ 配列関連ワード
       |    +- dictControl.cpp <---- 制御構造関連ワード
       |    +- dictIO.cpp <--------- 入出力関連ワード
       |    +- dictList.cpp <------- リスト関連ワード
       |    +- dictMath.cpp <------- 数学関数ワード
       |    +- dictObject.cpp <----- 型情報等に関するワード
       |    +- dictOptimize.cpp <--- 最適化のために用意されているワード
       |    +- dictParallel.cpp <--- 並列処理関連ワード
       |    +- dictStack.cpp <------ スタック操作関連ワード
       |    +- dictString.cpp <----- 文字列関連ワード
       |    +- dictWord.cpp <------- ワード定義用関連ワード
       |    +- ext <---------------- 拡張辞書関連ディレクトリ
       |         +- Makefile <------ 拡張辞書関連 Makefile
       |         +- extFactor.cpp <- Factor 風 if 文用拡張辞書
       |         +- extLP.cpp <----- 簡易文芸的プログラミング用拡張辞書
       +- inc <--------------------- ヘッダファイル格納ディレクトリ
       |    +- array.h <------------ 配列オブジェクト定義用テンプレート
       |    +- chan.h <------------- チャネルマネージャの定義
       |    +- context.h <---------- コンテキスト(*1) の定義
       |    +- errorID.h <---------- エラー ID の定義
       |    +- externals.h <-------- グローバル関数などの宣言
       |    +- file.h <------------- ファイルオブジェクトの定義
       |    +- inner.h <------------ 内部インタプリタ（VM のエンジン部分）
       |    +- mathMacro.h <-------- 数学関連ワード定義用マクロ
       |    +- optimizer.h <-------- オプティマイザ用プロトタイプ宣言
       |    +- outer.h <------------ 外部インタプリタ（内部インタプリタのドライバ）
       |    +- paraphrase.h <------- ワード定義用プロトタイプ宣言
       |    +- stack.h <------------ スタックおよびスタック操作関数
       |    +- thread.h <----------- マルチプラットフォーム用スレッドラッパ
       |    +- typedValue.h <------- スタックにプッシュ可能な値の定義（型付値）
       |    +- word.h <------------- ワード型の定義
       +- lang <-------------------- 言語コア部格納ディレクトリ
       |    +- Makefile <----------- 言語コア部 Makefile
       |    +- context.cpp <-------- コンテキスト（*1）実装部
       |    +- dictMan.cpp <-------- ワード登録（辞書管理）関連関数の実装部
       |    +- errorMessage.cpp <--- エラーメッセージ実装部
       |    +- inner.cpp <---------- 内部インタプリタ実装部
       |    +- optimizer.cpp <------ 最適化処理実装部
       |    +- outer.cpp <---------- 外部インタプリタ実装部
       |    +- para.cpp <----------- Paraphrase インタプリタ（REPL 部）実装部
       |    +- typedValue.cpp <----- スタックにプッシュ可能な値関連の実装部
       |    +- word.cpp <----------- ワード型関連実装部
       +- windows <----------------- Visual Studio 関連ファイル格納部
            +- ext <---------------- ext プロジェクト格納ディレクトリ
            |    +- extFactor <----- extFactor プロジェクトディレクトリ
            |    |    +- dllmain.cpp extFactor.dll 用 dllmain
            |    |    +- extFactor.vcxproj  extFactor.dll 用プロジェクトファイル
            |    +- extLP <--------- extLP プロジェクトディレクトリ
            |         +- dllmain.cpp extLP.dll 用 dllmain
            |         +- extLP.vcxproj  extLP.dll 用プロジェクトファイル
            +- libPP <-------------- Paraphrase インタプリタの実体格納ディレクトリ
            |    +- dllmain.cpp <--- libPP.dll 用 dllmain
            |    +- libPP.vcxproj <- libPP.dll 用プロジェクトファイル
            +- paraphrase.sln <----- Paraphrase 用ソリューションファイル
            +- paraphrase.vcxproj <- para.exe 用プロジェクトファイル

*1 コンテキスト＝内部インタプリタと連携することにより Virtual Machine を構成します。
　　内部インタプリタは実行部分であり、コンテキストはデータ部分を指します。
　　コンテキストには、定義中のワードやスタック等が保持されます。

